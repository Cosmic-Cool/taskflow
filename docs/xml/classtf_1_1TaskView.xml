<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classtf_1_1TaskView" kind="class" language="C++" prot="public">
    <compoundname>tf::TaskView</compoundname>
    <includes refid="task_8hpp" local="no">taskflow/core/task.hpp</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1TaskView_1a763b2f90bc53f92d680a635fe28e858e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Executor</definition>
        <argsstring></argsstring>
        <name>Executor</name>
        <qualifiedname>tf::TaskView::Executor</qualifiedname>
        <param>
          <type><ref refid="classtf_1_1Executor" kindref="compound">Executor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1051" column="16" bodyfile="taskflow/core/task.hpp" bodystart="1051" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1TaskView_1a05d718be8be0374448b570276709bedb" prot="private" static="no" mutable="no">
        <type>const Node &amp;</type>
        <definition>const Node&amp; tf::TaskView::_node</definition>
        <argsstring></argsstring>
        <name>_node</name>
        <qualifiedname>tf::TaskView::_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1117" column="16" bodyfile="taskflow/core/task.hpp" bodystart="1117" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1TaskView_1ac8cd58171de8ab4865e3c3f142db2db1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/Users/twhuang/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string &amp; tf::TaskView::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>tf::TaskView::name</qualifiedname>
        <briefdescription>
<para>queries the name of the task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1058" column="23" bodyfile="taskflow/core/task.hpp" bodystart="1125" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1aff16d269ac75cffa55a312593f20d30d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_successors</definition>
        <argsstring>() const</argsstring>
        <name>num_successors</name>
        <qualifiedname>tf::TaskView::num_successors</qualifiedname>
        <briefdescription>
<para>queries the number of successors of the task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1063" column="12" bodyfile="taskflow/core/task.hpp" bodystart="1145" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a050f76e486dea993a2b9d930539aad85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_predecessors</definition>
        <argsstring>() const</argsstring>
        <name>num_predecessors</name>
        <qualifiedname>tf::TaskView::num_predecessors</qualifiedname>
        <briefdescription>
<para>queries the number of predecessors of the task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1068" column="12" bodyfile="taskflow/core/task.hpp" bodystart="1130" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1adb798808f6ef9b46399fae1c2dbed19b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_strong_dependencies</definition>
        <argsstring>() const</argsstring>
        <name>num_strong_dependencies</name>
        <qualifiedname>tf::TaskView::num_strong_dependencies</qualifiedname>
        <briefdescription>
<para>queries the number of strong dependencies of the task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1073" column="12" bodyfile="taskflow/core/task.hpp" bodystart="1135" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1aaefc8ab88f17ac27e6537f6d6ecb37cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::num_weak_dependencies</definition>
        <argsstring>() const</argsstring>
        <name>num_weak_dependencies</name>
        <qualifiedname>tf::TaskView::num_weak_dependencies</qualifiedname>
        <briefdescription>
<para>queries the number of weak dependencies of the task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1078" column="12" bodyfile="taskflow/core/task.hpp" bodystart="1140" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a3cb647dc0064b5d11e0c87226c47f8f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::TaskView::for_each_successor</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_successor</name>
        <qualifiedname>tf::TaskView::for_each_successor</qualifiedname>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each successor of the task </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type (function, lambda, etc.) that accepts a <ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref> handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>visitor to apply to each subflow task</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This method allows you to traverse and inspect successor tasks of this task. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1089" column="10" bodyfile="taskflow/core/task.hpp" bodystart="1172" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1a1db6f5c5e325ea0e0d41a16aee2e3ad6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::TaskView::for_each_predecessor</definition>
        <argsstring>(V &amp;&amp;visitor) const</argsstring>
        <name>for_each_predecessor</name>
        <qualifiedname>tf::TaskView::for_each_predecessor</qualifiedname>
        <param>
          <type>V &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>applies an visitor callable to each predecessor of the task </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type (function, lambda, etc.) that accepts a <ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref> handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>visitor to apply to each predecessor task</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This method allows you to traverse and inspect predecessor tasks of this task. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1100" column="10" bodyfile="taskflow/core/task.hpp" bodystart="1183" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1aa20d7b5796064c3ab194e6d7ebe2adb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetf_1a1355048578785a80414707ff308b395a" kindref="member">TaskType</ref></type>
        <definition>TaskType tf::TaskView::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>tf::TaskView::type</qualifiedname>
        <briefdescription>
<para>queries the task type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1105" column="14" bodyfile="taskflow/core/task.hpp" bodystart="1150" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1abe95eb9e866cd7b8137d5e8ca5deace6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::TaskView::hash_value</definition>
        <argsstring>() const</argsstring>
        <name>hash_value</name>
        <qualifiedname>tf::TaskView::hash_value</qualifiedname>
        <briefdescription>
<para>obtains a hash value of the underlying node </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1110" column="12" bodyfile="taskflow/core/task.hpp" bodystart="1166" bodyend="1168"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1TaskView_1ad19afa391850d49513c4280439fc50ee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>(const Node &amp;)</argsstring>
        <name>TaskView</name>
        <qualifiedname>tf::TaskView::TaskView</qualifiedname>
        <param>
          <type>const Node &amp;</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1114" column="5" bodyfile="taskflow/core/task.hpp" bodystart="1121" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1TaskView_1ae85861fa894c206e800a9e5d4ee45cbf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::TaskView::TaskView</definition>
        <argsstring>(const TaskView &amp;)=default</argsstring>
        <name>TaskView</name>
        <qualifiedname>tf::TaskView::TaskView</qualifiedname>
        <param>
          <type>const <ref refid="classtf_1_1TaskView" kindref="compound">TaskView</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/task.hpp" line="1115" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>class to access task information from the observer interface </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="taskflow/core/task.hpp" line="1049" column="1" bodyfile="taskflow/core/task.hpp" bodystart="1049" bodyend="1118"/>
    <listofallmembers>
      <member refid="classtf_1_1TaskView_1a05d718be8be0374448b570276709bedb" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>_node</name></member>
      <member refid="classtf_1_1TaskView_1a763b2f90bc53f92d680a635fe28e858e" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>Executor</name></member>
      <member refid="classtf_1_1TaskView_1a1db6f5c5e325ea0e0d41a16aee2e3ad6" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>for_each_predecessor</name></member>
      <member refid="classtf_1_1TaskView_1a3cb647dc0064b5d11e0c87226c47f8f8" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>for_each_successor</name></member>
      <member refid="classtf_1_1TaskView_1abe95eb9e866cd7b8137d5e8ca5deace6" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>hash_value</name></member>
      <member refid="classtf_1_1TaskView_1ac8cd58171de8ab4865e3c3f142db2db1" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>name</name></member>
      <member refid="classtf_1_1TaskView_1a050f76e486dea993a2b9d930539aad85" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_predecessors</name></member>
      <member refid="classtf_1_1TaskView_1adb798808f6ef9b46399fae1c2dbed19b" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_strong_dependencies</name></member>
      <member refid="classtf_1_1TaskView_1aff16d269ac75cffa55a312593f20d30d" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_successors</name></member>
      <member refid="classtf_1_1TaskView_1aaefc8ab88f17ac27e6537f6d6ecb37cf" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>num_weak_dependencies</name></member>
      <member refid="classtf_1_1TaskView_1ad19afa391850d49513c4280439fc50ee" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1ae85861fa894c206e800a9e5d4ee45cbf" prot="private" virt="non-virtual"><scope>tf::TaskView</scope><name>TaskView</name></member>
      <member refid="classtf_1_1TaskView_1aa20d7b5796064c3ab194e6d7ebe2adb1" prot="public" virt="non-virtual"><scope>tf::TaskView</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
